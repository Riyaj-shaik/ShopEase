package com.example.ProjectEcommerce.Config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // ✅ Needed for API & Postman
            .authorizeHttpRequests(auth -> auth
                // Public Auth endpoints
                .requestMatchers("/api/auth/register", "/api/auth/login").permitAll()
                // Public GET products
                .requestMatchers(HttpMethod.GET, "/api/products/**").permitAll()
                // Protected modifications
                .requestMatchers(HttpMethod.POST, "/api/products/**").authenticated()
                .requestMatchers(HttpMethod.PUT, "/api/products/**").authenticated()
                .requestMatchers(HttpMethod.DELETE, "/api/products/**").authenticated()
                // Everything else requires login
                .anyRequest().authenticated()
            )
            .httpBasic(); // ✅ Allows Postman to test protected endpoints

        return http.build();
    }
}
